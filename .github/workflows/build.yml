# 工作流程的名稱，會顯示在 GitHub 的 Actions 頁面上
name: Java CI with Maven and Docker

# 觸發這個工作流程的事件
on:
  # 當有程式碼被推送到(push) main 分支時
  push:
    branches: [ "main" ]
  # 當有針對 main 分支的拉取請求(pull request)被建立或更新時
  pull_request:
    branches: [ "main" ]

# 定義工作流程中需要執行的任務
jobs:
  # 我們定義一個名為 "build-and-push" 的任務
  build-and-push:
    # 指定這個任務要跑在哪一種虛擬環境上
    runs-on: ubuntu-latest
    # 設定這個任務的權限，需要有寫入 packages 的權限才能推送 Image
    permissions:
      contents: read
      packages: write

    # 這個任務包含的步驟
    steps:
    # 步驟 1: "Checkout" 你的程式碼
    # 'uses' 關鍵字代表使用一個預先寫好的 "Action" (可重用的腳本)
    # actions/checkout@v4 會將你的專案程式碼下載到虛擬環境中
    - name: Checkout repository
      uses: actions/checkout@v4

    # 步驟 2: 設定 Java 環境
    # actions/setup-java@v4 這個 Action 會幫我們安裝好指定的 Java 版本
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'        # 指定安裝 JDK 17
        distribution: 'temurin'   # 指定 Java 的發行版 (Temurin 是個很常見的選擇)
        cache: maven              # 這是一個重要的優化：它會快取 Maven 下載的依賴套件，讓後續的建置更快

    # 步驟 3: 使用 Maven 進行建置
    # 'run' 關鍵字代表直接執行一個 shell 指令
    # 這行指令就跟我們剛剛在您電腦上執行的一模一樣
    - name: Build with Maven
      run: ./mvnw clean install

    # --- 新增的 Docker 步驟 ---

    # 步驟 4: 登入 GitHub Container Registry (GHCR)
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        # ${{ github.repository_owner }} 會自動抓取倉庫的擁有者名稱 (munmun112227)
        # ${{ secrets.GITHUB_TOKEN }} 是由 GitHub Actions 自動產生的臨時密碼，最安全
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 步驟 5: 提取 Docker image 的中繼資料 (例如標籤)
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/demo

    # 步驟 6: 建立 Docker image 並推送到 GHCR
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
